[["data.html", "2 Data Cleaning", " 2 Data Cleaning As mentioned in (intro) #Importing data&lt;-read.csv(&quot;data/hcvdat0.csv&quot;,header = T,colClasses=c(&quot;NULL&quot;, rep(NA, 13))) #glimpse(data) skimr::skim(data)[1:3] Table 2.1: Data summary Name data Number of rows 615 Number of columns 13 _______________________ Column type frequency: character 2 numeric 11 ________________________ Group variables None Variable type: character skim_variable n_missing Category 0 Sex 0 Variable type: numeric skim_variable n_missing Age 0 ALB 1 ALP 18 ALT 1 AST 0 BIL 0 CHE 0 CHOL 10 CREA 0 GGT 0 PROT 1 Modify the target variableCategoryinto binary so that Category= 0 if it falls into either0=Blood Donoror0s=suspect Blood Donorand 1 if it falls into any other categoryexcept being missing, in which case we keep it as is. data$Category&lt;-ifelse(data$Category==&quot;0=Blood Donor&quot; | data$Category==&quot;0s=suspect Blood Donor&quot;,0,1) Obtain the frequency distribution of Category. Observe Imbalanced classification problem table(data$Category) #Frequency distribution of Category ## ## 0 1 ## 540 75 We can see that,we have no missing values for the variable Category.Also,the frequency distribution shows 0=570 and 1=75.This shows an imbalanced classification problem since the frequency of response (Category) is skewed towards 0. Inspect for the missing values in the predictors. Impute the missing values if any. Note that you are not supposed to use information in the target variable when performing the imputation. colMeans(is.na(data)) ## Category Age Sex ALB ALP ALT ## 0.000000000 0.000000000 0.000000000 0.001626016 0.029268293 0.001626016 ## AST BIL CHE CHOL CREA GGT ## 0.000000000 0.000000000 0.000000000 0.016260163 0.000000000 0.000000000 ## PROT ## 0.001626016 This shows the proportion of missing values in each column or varibale. We can observe that,ALP has the highest missing values. #Checking the proportion of missing values in the data gg_miss_upset(data) Mice Imputation for missing values. Use model.matrix()to change the data matrix into numeric. Dummy variables will be automatically created for each categorical predictor. data&lt;-model.matrix(~.,data = data) data&lt;-data[,-1] "]]
